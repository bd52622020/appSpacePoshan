HDFS: Hadoop Distributed File System is a primary data storage system used by Hadoop. I includes:
a. Client Node:
	It is the primary node from where we get data that needs to be stored in the system. It ask for permission to name node for storing the date.

b. Name Node: 
	It analyse and review the types of date that needs to be stroed in data note. I creates and saves log of each activities.

c. Data Node:
	It saves the data in a ditribted manner. I constantly communicates with Name node for data saving. It is also know as slave

Multi processing and multi threding in python

Multiprocessing

	A multiprocessing system is one which has alteast two processors. The CPUs are added to the system to increase the computing speed of the system. Each CPU has its own set of registers and main memory. Just because CPUs are separate, it may happen that one CPU must not have anything to process and may sit idle and the other may be overloaded with the processes. In such cases, the processes and the resources are shared dynamically among the processors.
	Multiprocessing can be classified as symmetric multiprocessing and asymmetric multiprocessing. In symmetric multiprocessing, all processors are free to run any process in a system. In Asymmetric multiprocessing, there is a master-slave relationship among the processors. The master processor is responsible for allotting the process to slave processors.
	If the processor has integrated memory controller then adding processor would increase the amount of addressable memory in the system. Multiprocessing can change the memory access model from uniform memory access to nonuniform memory access. The uniform memory access amounts the same time for accessing any RAM from any Processor. On the other hands, non-uniform memory access amounts longer time to access some part of memory than the other parts.


Multithreading
	Multithreading is the execution of multiple threads of a single process concurrently within the context of that process. Now let us first discuss what is a thread? A thread of a process means a code segment of a process, which has its own thread ID, program counter, registers and stack and can execute independently. But threads belonging to the same process has to share the belongings of that process like code, data, and system resources.
	Creating separate processes for each service request consumes time and exhaust system resources. Instead of incurring this overhead, it is more efficient to create threads of a process.
	To understand the multithreading concept let us take an example of a word processor. A word processor, displays graphic, responds to keystrokes, and at the same time, it continues spelling and grammar checking. You do not have to open different word processors to do this concurrently. It does get happen in a single word processor with the help of multiple threads.
	Now let us take into consideration the benefits of multithreading. Multithreading increases the responsiveness as if one thread of a process is blocked or performing the lengthy operation, the process still continues. The second benefit of multithreading is resource sharing as several threads of a process share same code and data within the same address space.
	Creating a thread is economical as it shares the code and data of the process to which they belong. So the system does not have to allocate resources separately for each thread. Multithreading can be increased on multiprocessing operating system. As multithreading on multiple CPUs increases parallelism.

Conclusion:

The benefits of multithreading can be gradually increased in multiprocessing environment as multithreading on a multiprocessing system increases parallelism.


Is python multi-processing and muti-threding in parallel

Python Interpreter is a linevm that runs as a thread possesed by OS. In python if we try run two threads, it tries to run in serial order. GIL (Global Interpreter Lock) in python chech to know the stat of thread. In earlier version of python, GIL used to check the threads in 100 Tiks(instruction executed by the inteperter on bytes 1 tick = 1 byte). This process was time consuming and high overhead. In later version from python 3.2 the 100 ticks were updated to fixed time apprach (5 ms). From here each thread gets equal oppertunity and time to execute its operation. Python works as Cordinated Mutli Tasking, where each thread is run in concurrent manner.

With threading, concurrency is achieved using multiple threads, but due to the GIL only one thread can be running at a time. In multiprocessing, the original process is forked process into multiple child processes bypassing the GIL. Each child process will have a copy of the entire program's memory.

Both multithreading and multiprocessing allow Python code to run concurrently. But only multiprocessing will allow your code to be truly parallel. However, if your code is IO-heavy (like HTTP requests), then multithreading will still probably speed up your code.


Data PipeLines:
MovieSet : https://www.kaggle.com/rounakbanik/the-movies-dataset

Suicide from 1985 to 2016: https://www.kaggle.com/russellyates88/suicide-rates-overview-1985-to-2016

Ecommerce : https://www.kaggle.com/carrie1/ecommerce-data


